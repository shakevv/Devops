name: CI

on:
  push:
    branches:
      - '**'
      - '!main'
  pull_request:
    types: [opened, reopened, closed]
    branches:
      - main

jobs:
  secrets-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-style-check: 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:  
          python-version: 3.12
      - name: Upgrade Pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Code Style Dependencies
        run: |
          pip3 install flake8
      - name: Run Flake8
        run: flake8 src
      - name: Run Editor Config Checker
        uses: editorconfig-checker/action-editorconfig-checker@main
      - run: editorconfig-checker
      - uses: actions/setup-node@v4   
      - name: Run Markdown Lint
        run: |
          npm i -g cli-markdown
          md README.md

  unit-testing:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:  
          python-version: 3.12
      - name: Install Project Dependencies
        run: |
          pip install -r src/requirements.txt    
      - name: Run Unit Tests
        run: |
          python src/app_test.py

  sca-sast-scan-and-reporting:
    needs: [secrets-check, code-style-check, unit-testing]
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:  
          python-version: 3.12
      - name: Upgrade Pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Project Dependencies
        run: |
          pip install -r src/requirements.txt
      - name: Run Snyk test to Create Dependency Vulnerability Report
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test --sarif
          args: --sarif-file-output=snyk_test.sarif --file=src/requirements.txt --package-manager=pip --command=python3 -- --allow-missing
      - name: Run Snyk code test to Create SAST Report
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test --sarif
          args: --sarif-file-output=snyk_code_test.sarif
      - name: Create SARIF Directory and Move SARIF Files
        run: |
          mkdir sarif_files &&
          mv snyk_test.sarif snyk_code_test.sarif sarif_files/
      - name: Upload Scan Results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: sarif_files 
      - name: Run Snyk test for High Severity Dependency Treshold or Higher
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high --file=src/requirements.txt --package-manager=pip --command=python3 -- --allow-missing
      - name: Run Snyk code test for SAST Problems
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test 

  database-migrations-test:
    needs: [secrets-check, code-style-check, unit-testing]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: joshuaavalon/flyway-action@v3.0.0
        with:
          filesystem: ./sql
          url: jdbc:postgresql://postgres:5432/db
          user: user
          password: password
      - run: echo 'testing db migrations'

  docker-img-test-and-report:
    needs: [secrets-check, code-style-check, unit-testing]
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      packages: write
    env:
      TEST_TAG: ${{ secrets.DOCKER_USERNAME }}/devops:test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build an Image From Dockerfile
        run: |
          docker build -t ${{ env.TEST_TAG }} .
      - name: Run Trivy Vulnerability Scanner on Test Docker Image and Create Report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.TEST_TAG }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy Scan Results to GitHub Security Tab 
        uses: github/codeql-action/upload-sarif@v2
        if: always() && github.event.pull_request.merged != true
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Run Trivy Vulnerability Scanner for Critical Problems
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.TEST_TAG }}'
          severity: 'CRITICAL'
          exit-code: 1
      - name: Run Test Docker Image
        run: |
          docker run -d --rm --name test_container ${{ env.TEST_TAG }} && docker ps && docker kill $(docker ps -q)

  docker-build-and-push-img:
    if: github.event.pull_request.merged == true
    needs: [sca-sast-scan-and-reporting, database-migrations-test, docker-img-test-and-report]
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      packages: write
    env:
      LATEST_TAG: ${{ secrets.DOCKER_USERNAME }}/devops:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and Push to Dockerhub
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.LATEST_TAG }}